ChangeLog: 

04/08/2010:
	## FIXED: NPE caused when hitting cancel on addbuddy dialog
	## All  user logins are encrypted
		!! Encrypted with server public key so only server can read it
		@@ Should we add a signature to prove they have the private key?
	## Implemented key ditribution protocol
		@@ When a new user is created, their key is saved on the server
		@@ Any user can request the public key of any other user
		@@ Users save public keys of their buddies on hard drive
	## All user signups are encrypted
		@@ Everything except for the user's public key is encrypted before sending
	## FIXED: Can no longer spam blank messages
	## Messages headers are now encrypted
		@@ When a user sends a message, the header is encrypted with Aegis public key
		@@ Aegis decrypts the header, creates a new header and encrypts it with
		   the destination public key

04/07/2010:
	## FIXED: When adding a new user - it will automatically check to see if they are online
		!! Had to rearrange the way we communicate with the server when the Client listen Thread is running. 
	## Moved buddylist into users/[username]/buddylist.csv
	## Implemented Splash screen
	## Implemented SignOn and SignOff sounds
	## NEW CLASS: ClientSplash (implements the splashscreen)
	## ADDED: Drop down menu for removing contacts from contact list
	## PREFERENCE INTERFACE - Completed implementation of general settings 	(system tray, esc to close tab, spell check)
	## FIXED: Tab focus now set to text field any time a new tab is 	created or current tab is selected
	## FIXED: Scroll position set to bottom of text area without selecting 	all text every time
	## Added close button to all conversation tabs
	## Added labels to add and remove contact buttons

04/05/2010:
	##FINALLY fixed label issue in Preference interface - no more glitch
		@@ Nicer borders, icons will be replaced with nicer images soon
	##Implemented system tray setting under general options
	##Established code flow for remaining settings
		@@ Using flag variables and binary setting values to keep track of individual setting changes
	##Added encryption to buddylist.csv
		@@ Uses the custom DESCrypto library to encrypt and decryptbuddy's names
	## Will document code in more detail tomorrow (4/6/10)
04/03/2010:
	## RSACrypto is almost fully integrated
	## There is a single encryption test in the code
	
03/03/2010:  WE'RE BACK
	## CREATED NEW METHODS:
		@@ instanciateBuddyList() @Overloaded
		@@ return BuddyListArray()
			//Returns a String array of usernames from the buddylist file
	## BuddyList now gets it's information from the buddylist.csv file
	## Adding and removing users now works
	## The buddylist dynamically updates itself when you add and remove buddies and when they sign and sign off.
	## Buddylist will not let you add the same user twice, and it will not register and global activity from users who are not on your buddylist
	
03/03/2010:
	## CREATED NEW CLASS: ClientAddUser
		@@Ads a new user to the database
	## Added new fields to the database
		@@ FirstName, LastName, Emailaddress
			
03/02/2010: 
	## Enabled Hashing of the passwords in the database
	## Hashes the provided password from the user before checking the password in the database
03/01/2010:
	## Moved DrawingPanel to it's own file
	## Implemented in ClientPreferences:
		@@ Found images in the /images/ directory that will be used in the Preferences Window
		@@ Created new JPanels to be the individual option menus
		@@ Created MouseListeners for each of the images
		
02/26/2010: 
	## CREATED NEW CLASS: DrawingPanel
		@@Creates drawingPanels to paint onto other panels
		@@Used for painting the add, remove user (plus more later) images into the main window
	## Implemented and painted the add, remove user images onto the main window
	## The buddylist now updates when a user logs on
02/25/2010:
	## CREATED NEW CLASS: ClientLogin	
		@@Creates the login Swing window
		@@Implemented methods and components of ClientLogin - to make sure logging in works
	## Created new method in Client.java
		@@setUsername(String usernameToSet) - Allows Client to understand who is logged in at one time (because now the username is being sent from ClientLogin window
02/23/2010:
	## BACKLOG: Dynamic buddylist partially implemented
		@@List is created from otherUsers[], and it displays who is online when you sign on
		@@When they sign off, they are removed from your list
		@@TODO: dynamic update when a buddy signs in
	## Code Review

02/13/2010:
	##ServerThread instances close cleanly when a user disconnects, preventing spamming the console.
		@@Thread life is now governed by int isAlive. 
		@@Set to 1 in constructor, set to 0 on any exception caused by dead datastreams. 
		@@User/Socket is removed from hashtables and thread terminates.
	##Client handles errors in a way more informative to users
	##Cleaned up code. Mini code review

02/10/2010:
	##Fixed the GUI a lot
	##Added dynamic, tabbed GUI for each chat

02/09/2010:
	##Weekly code review(Greg/Norm)
	##Changed from an applet to a GUI
	
02/08/2010:
	##Added BuddyList method
		@@Uses XML Parsers to input usernames into buddylist.xml
	##Added createUsername method 
		@@Not completed yet
	
02/06/2010:
	##Added XML-generating code to be implemented for buddylist
	##Added JComboBox for choosing which user to send to.
		@@ List is hard coded right now, work off of buddylist XML
		   eventually switch to real buddylist
	##Made a routeMessage() method in ServerThread for better modularity
	##Numerous small changes to all files
	!!BUG: One time, the user/socket was not removed correctly.
		@@ Caused lots of EOFExceptions on server.

02/02/2010:
	##Weekly code review (Norm)
	##Added TODO notes in code.
		@@ Marks where code needs work. What we have to remove, add, or change
	##Added "detailed file notes" and fixed/added comments in all files

02/01/2010:
	##Implemented Emo Method
	!!Depreciated Emo Method
	##Implemented sendMessage Method
		@@ sendMessage finds the recipiant user's socket in the first hashtable (userToSocket), then finds that user's dataOutputStream from the second hashtable (outputStreams)
		@@ Then it sends the user's message using writeUTF
	##Implemented login Method
		@@ login takes in the username and the password, searches the database for the username, and then matches the password in the database to the password given
		@@ If login information does not match entries in the database, kill the thread
		
	##Implemented dbConnect Method
		@@ This is the function that we will use to return an object of type Connection. This has the database information stored such that if/when the information changes we only have to change it in one place. 
	
	##Implemented updateHashTable Method
		@@ Grabs all the usernames and passwords from the database and stores them inside the HashTable authentication
	
	##Implemented mapUserSocket Method
		@@ Takes in the username and userSocket and places those values into a HashTable called userToSocket
		
	!!Depreciated sendToAll Method


